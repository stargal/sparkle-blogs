name: Upload to Qiniu
on:
  push:
    branches:
      - main

jobs:
  upload:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: npm install qiniu

      - name: Upload to Qiniu
        env:
          ACCESS_KEY: ${{ secrets.QINIU_ACCESS_KEY }}
          SECRET_KEY: ${{ secrets.QINIU_SECRET_KEY }}
          BUCKET: ${{ secrets.QINIU_BUCKET_NAME }}
          PREFIX: public/
        run: |
          node -e "
          const qiniu = require('qiniu');
          const accessKey = process.env.ACCESS_KEY;
          const secretKey = process.env.SECRET_KEY;
          const bucket = process.env.BUCKET;
          const prefix = process.env.PREFIX;
          const mac = new qiniu.auth.digest.Mac(accessKey, secretKey);
          const options = {
            scope: bucket,
          };
          const putPolicy = new qiniu.rs.PutPolicy(options);
          const uploadToken = putPolicy.uploadToken(mac);
          const config = new qiniu.conf.Config();
          config.zone = qiniu.zone.Zone_z0;
          const formUploader = new qiniu.form_up.FormUploader(config);
          const putExtra = new qiniu.form_up.PutExtra();
          const fileList = [];

          const bucketManager = new qiniu.rs.BucketManager(mac, config);

          function deleteFiles() {
            bucketManager.listPrefix(bucket, {prefix: prefix}, function(err, respBody, respInfo) {
              if (err) {
                console.log(err);
                throw err;
              }

              const filesToDelete = respBody.items.map(item => qiniu.rs.deleteOp(bucket, item.key));

              bucketManager.batch(filesToDelete, function(err, respBody, respInfo) {
                if (err) {
                  console.log(err);
                  throw err;
                }

                console.log('All files deleted!');
              });
            });
          }

          function uploadFiles() {
            function walkDir(dir) {
              const files = fs.readdirSync(dir);
              for (const file of files) {
                const filePath = path.join(dir, file);
                const stat = fs.statSync(filePath);
                if (stat.isDirectory()) {
                  walkDir(filePath);
                } else {
                  fileList.push(filePath);
                }
              }
            }

            const fs = require('fs');
            const path = require('path');
            walkDir(prefix);

            const promises = fileList.map(filePath => {
              const key = path.relative(prefix, filePath);
              console.log('Uploading:', filePath, 'to', key);
              const readableStream = fs.createReadStream(filePath);
              return new Promise((resolve, reject) => {
                formUploader.putStream(uploadToken, key, readableStream, putExtra, (err, body, info) => {
                  if (err) {
                    reject(err);
                  } else {
                    resolve();
                  }
                });
              });
            });

            Promise.all(promises).then(() => {
              console.log('All files uploaded!');
            });
          }

          deleteFiles();
          uploadFiles();
          "
